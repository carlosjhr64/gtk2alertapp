#!/usr/bin/env ruby
# Mutex defined
# Regexp defined
# File defined
# Thread defined
# Time defined
# ARGV defined
require 'gtk2alertapp/alertparser.rb'
# Gtk2AlertApp defined
# Alerts defined

class AlertDaemon # AlertDaemon defined
  MUTEX	= Mutex.new
  # note parser is fault tolerant
  XADD	= Regexp.new('^a\s+(\S.*)$')
  XDELETE = Regexp.new('^d\s+(\w*)$')
  XLIST	= Regexp.new('^l(\s+(\S.*))?$') # lists, also loads
  XSAVE	= Regexp.new('^s\s+(\S.*)$')

  def load_data_file(filename)
    fh = File.open(filename, 'r')
    fh.each {|line| self.parse_data(line.strip) }
    fh.close
  end

  def self.thread_sleep
    mins = Time.now.to_f / 60.0
    secs = 61 - ((mins - mins.to_i)*60.0).to_i
    sleep(secs)
  end

  def initialize(datafile=nil,options='')
    @alerts = Gtk2AlertApp::Alerts.new
    self.load_data_file(datafile) if datafile && File.exist?(datafile)
    @trace = (options=~/-t/i)? true: false
    Thread.new { self.init_thread }
  end

  def thread_synchronize
    @time = Time.now.strftime('%M %H %d %m %w').split(/\s+/).map{|time| time.to_i}
    @alerts.each {|name,values| self.thread_alerts(values[1..5],values[6]) if values[0] }
  end

  def init_thread
    begin
      while true do
        MUTEX.synchronize { thread_synchronize }
        AlertDaemon.thread_sleep
      end
    rescue Exception
      $stderr.puts $!
    end
  end

  def dotrace(string)
    $stderr.puts string if @trace
  end

  def thread_alerts(time,command)
    0.upto(4) do |index|
      next if !(time_index = time[index])
      return if !(time_index === @time[index])
    end
    dotrace(command)
    # if command does not deal with it's streams, discard them
    exec( "(#{command}) > /dev/null 2>&1" )	if fork.nil?
  end

  def parse_data(entry)
    MUTEX.synchronize do
      @alerts.add(entry)
    end
  end

  def alerts_delete(alert)
    MUTEX.synchronize do
      @alerts.delete(alert)
    end
  end

  def alerts_puts
    @alerts.keys.each {|name| $stdout.puts @alerts.entry(name) }
    $stdout.puts
    $stdout.flush
  end

  def save_synchronize(fh)
    @alerts.keys.each {|name| fh.puts @alerts.entry(name) }
  end

  def alerts_save(datafile)
    fh = File.open(datafile,'w')
    MUTEX.synchronize { save_synchronize(fh) }
    fh.close
  end

  def list_load(datafile)
    (datafile.nil?)?  alerts_puts : load_data_file(datafile)
  end

  def parse_command(line)
    if xadd = XADD.match(line) then
      # add or modify alerts
      parse_data(xadd[1])
    elsif xdelete = XDELETE.match(line) then
      # delete a job from alerts
      alerts_delete(xdelete[1])
    elsif xlist = XLIST.match(line) then
      list_load(xlist[2])
    elsif xsave = XSAVE.match(line) then
      alerts_save(xsave[1])
    else
      dotrace("What?")
    end
  end

  def run
    $stdin.each{|line|
      begin
        parse_command(line.strip)
      rescue Exception
        dotrace($!)
      end
    }
  end
end

# Suck up command line options
options = ''
while ARGV[0]=~/^-/ do
  options += ARGV.shift
end
datafile = ARGV.shift

AlertDaemon.new(datafile,options).run
