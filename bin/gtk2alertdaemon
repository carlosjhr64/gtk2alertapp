#!/usr/bin/env ruby
require 'gtk2alertapp/alertparser.rb'

class AlertDaemon
  MUTEX	= Mutex.new
  # note parser is fault tolerant
  XADD	= Regexp.new('^a\s+(\S.*)$')
  XDELETE = Regexp.new('^d\s+(\w*)$')
  XLIST	= Regexp.new('^l(\s+(\S.*))?$') # lists, also loads
  XSAVE	= Regexp.new('^s\s+(\S.*)$')

  def parse_data(entry)
    MUTEX.synchronize do
      @alerts.add(entry)
    end
  end

  def load_data_file(filename)
    File.open(filename, 'r') {|fh| fh.each {|line| parse_data(line.strip) } }
  end

  def parse_command(line)
    if md = XADD.match(line) then
      # add or modify alerts
      parse_data(md[1])
    elsif md = XDELETE.match(line) then
      # delete a job from alerts
      MUTEX.synchronize do
        @alerts.delete(md[1])
      end
    elsif md = XLIST.match(line) then
      if datafile = md[2] then
        load_data_file(datafile)
      else
        @alerts.keys.each {|name| $stdout.puts @alerts.entry(name) }
        $stdout.puts
        $stdout.flush
      end
    elsif md = XSAVE.match(line) then
      datafile = md[1]
      File.open(datafile,'w'){|fh|
        MUTEX.synchronize do
          @alerts.keys.each {|name| fh.puts @alerts.entry(name) }
        end
      }
    else
      $stderr.puts 'What?' if $options=~/t/i
    end
  end

  def initialize(datafile=nil)
    @alerts = Gtk2AlertApp::Alerts.new
    load_data_file(datafile) if datafile && File.exist?(datafile)
    Thread.new {
      begin
        while true do
          MUTEX.synchronize do
            mn,hr,dy,mt,wd = Time.now.strftime('%M %H %d %m %w').split(/\s+/).map{|x| x.to_i}
            @alerts.each {|name,values|
              if values[0] then # execution flag
                minute, hour, day, month, wday, command = values[1..6]
                next if minute	&& !(minute === mn)
                next if hour	&& !(hour === hr)
                next if day	&& !(day === dy)
                next if month	&& !(month === mt)
                next if wday	&& !(wday === wd)
                $stderr.puts command	if $options=~/t/i
                # if command does not deal with it's streams, discard them
                system( "(#{command}) > /dev/null 2>&1 &" )
              end
            }
          end
          mins = Time.now.to_f / 60.0
          secs = 61 - ((mins - mins.to_i)*60.0).to_i
          sleep(secs)
        end
      rescue Exception
        $stderr.puts $!
      end
    }
  end

  def run
    $stdin.each{|line|
      begin
        parse_command(line.strip)
      rescue Exception
        $stderr.puts $! if $options=~/t/i
      end
    }
  end
end

# Suck up command line options
$options = ''
while ARGV[0]=~/^-/ do
  $options += ARGV.shift
end
datafile = ARGV.shift

AlertDaemon.new(datafile).run
