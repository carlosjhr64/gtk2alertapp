#!/usr/bin/env ruby
# Get the Gtk2App library
require 'rubygems'
gem 'gtk2applib', '~> 2.1.0'
require 'gtk2applib/gtk2_app'

# The About info
about = {
	:authors	=> ['carlosjhr64@gmail.com'],
	:comments	=> "and cron functionality",
	:website	=> 'http://ruby-gnome-apps.blogspot.com/search/label/Alerts',
	:website_label	=> 'Ruby-Gnome Alerts',
	:license	=> 'GPL',
	:copyright	=> '2009-Jul-16',
	}

# Miscellaneous info on this application/file
application = {
	:name		=> 'Ruby-Gnome Alerts',
	:tooltip	=> "Alerts",
	:FILE		=> __FILE__,
	}

# Open a pipe to the alerts daemon
IO.popen('gtk2alertdaemon','w+') {|pipe|
  first_time = true
  Gtk2App.instance(application, about) do |window|

      if first_time then
        # Tell the daemon to load up the alerts from alerts.dat
        first_time = false
        pipe.puts "l #{Configuration::ALERTS_DATA_FILE}"
        pipe.flush
      end

      # Ask daemon for a listing of current alerts
      require 'gtk2alertapp/alertparser.rb'
      alerts = Gtk2AlertApp::Alerts.new
      pipe.puts 'l'
      pipe.flush
      while (line = pipe.gets.strip).length > 0 do
        begin
          alerts.add(line)
        rescue Exception
          puts_bang!(line) # since the daemon uses the same parser, this should not happen
        end
      end

      # Build the alerts editor
      require 'gtk2alertapp/gtk2alertapp.rb'
      scrolled = Gtk::ScrolledWindow.new
      window.add(scrolled)
      vbox = Gtk::VBox.new
      scrolled.add_with_viewport( vbox )
      hbox = Gtk::HBox.new
      Gtk2AlertApp::DigitalClock.new("%A, %B %d %Y, %I:%M:%S %p",hbox)
      Gtk2App::common(hbox,vbox) # packs hbox into vbox
      alert_editor = Gtk2AlertApp::AlertEditor.new(pipe, vbox, alerts)

      # Show the alerts listings
      entry_rows = Gtk2AlertApp::EntryRows.new(pipe,alert_editor,alerts,vbox)
      alerts.keys.sort{|a,b| a.upcase<=>b.upcase}.each{|name|
        entry_rows.add(name)
      }
      # Give alert_editor a hook to entry_rows,
      # allows alert_editor to populate entry_rows
      alert_editor.entry_rows = entry_rows
  end
  # Right now, only saving on exit, no changed checks?
  pipe.puts "s #{Configuration::ALERTS_DATA_FILE}"
  pipe.flush
}
